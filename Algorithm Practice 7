# Write a class TempTracker with these methods:

# insert()—records a new temperature
# get_max()—returns the highest temp we've seen so far
# get_min()—returns the lowest temp we've seen so far
# get_mean()—returns the mean ↴ of all temps we've seen so far
# get_mode()—returns a mode ↴ of all temps we've seen so far
# Optimize for space and time. Favor speeding up the getter methods get_max(), get_min(), get_mean(), and get_mode() over speeding up the insert() method.

# get_mean() should return a float, but the rest of the getter methods can return integers. Temperatures will all be inserted as integers. We'll record our temperatures in Fahrenheit, so we can assume they'll all be in the range 0..1100..110.

# If there is more than one mode, return any of the modes.

class TempTracker
  
  def initialize
    @temps = []
    @max = 0
    @min = 0
    @mean = 0
    @count = 0
    @mode = 0
  end
  
  def insert(temp)
    if temp > @max
      @max = temp
    end
    if temp < @min
      @min = temp
    end
    @count += 1
    @mean = (@mean * @count-1) + temp) / @count 
    @mode = 
  end
  
  def get_max
    @temps.max
    # max = @temps[0]
    # for x in @temps
    #   if x > max
    #     max = x
    #   end
    # end
    # return max
  end  
  
  def get_min 
    min = @temps[0]
    for x in @temps
      if x < min
        min = x
      end
    end
    return min
  end
  
  def get_mean
   @temps.sum/(@temps.length).to_f
  end
  
  def get_mode
    @temps.max_by { |i| @temps.count(i) }
  end
  
end

temperatures = TempTracker.new
temperatures.insert(87)
temperatures.insert(50)
temperatures.insert(99)
temperatures.insert(7)
temperatures.insert(47)
temperatures.insert(87)
puts temperatures.get_mean
puts temperatures.get_mode
puts temperatures.get_max
puts temperatures.get_min

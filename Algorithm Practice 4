

### First Attempts
# def function (array)
#   def merge_ranges(array)
#     second_array = [[0, 1]]
#     i = 0
#     while i < array.length
#     j = 0
#       while j < second_array.length
#         if array[i][0] <= second_array[j][0] && array[i][1] >= second_array[j][1]
#           p "1"
#           second_array[j] = array[i]
#         elsif array[i][0] <= second_array[j][0] && array[i][1] <= second_array[j][0]
#         p "2"
#           second_array[j][0] = array[i][0]
#         elsif array[i][0] <= second_array[j][1] && array[i][1] >= second_array[j][1]
#         p "3"
#           second_array[j][1] = array[i][1]
#         elsif array[i][0] > second_array[j][1]
#         p "4"
#           second_array << array[i]
#         elsif array[i][1] < second_array[j][0]
#         p "5"
#           second_array << array[i]
#         end
#       j += 1
#       end
#     i += 1
#     end 
#     return second_array
#   end
#   merge_ranges(array)
# end
    
# function(arrays)
  
  #[[0, 1], [3, 8], [9, 12]]



# def sort_gaps(array)
#   i = 2
#   array2 = [array[0], array[1]]
#   array3 = [(array, array2).flatten.min, [Range.new(array2[0][1]array2[1][0]), (array, array2).flatten.max]
#   while i < array.length
#     if Range.new(array[i][0],array[i][1]).include?array3.flatten
#       array2 = (array[i].flatten, array2.flatten).min 
   
# end

# def new_try(array)
#   i = 0
#   array3 = []
#   while i < array.length
#   array2 = []
#     j = 0
#     while j < array.length
#       if !(((array[j][0]..array[j][1]).to_a)&((array[i][0]..array[i][1]).to_a)).empty?
#         p i
#         array2 << array[j]
#         p array2
#       end
#       j += 1
#     end
#     array3 << [array2.flatten.min, array2.flatten.max]
#     i+=1
#     p "3"
#     p array3
#   end
# return  array3.uniq
# end


array = [[1, 4], [6,8], [2,7], [10,20], [2,9], [1,5], [12, 14], [0,1],[1, 4], [6,8], [2,7], [10,20], [2,9], [1,5], [12, 14], [0,1],[1, 4], [6,8], [2,7], [10,20], [2,9], [1,5], [12, 14], [0,1],[1, 4], [6,8], [2,7], [10,20], [2,9], [1,5], [12, 14], [0,1]]
  

def merge_ranges(array)
  i = 1
  array3 = [array[0]]
  while i < array.length
    array2 = []
    array4 = []
    j = 0
    while j < array3.length
      if !(((array3[j][0]..array3[j][1]).to_a)&((array[i][0]..array[i][1]).to_a)).empty?
        array2 << array[i]
        array2 << array3[j]
        array4 << j
      end
      j += 1
    end
    
    if array2 != [] or nil
      x = 0
      while x < array4.length
      p array4[x]
        array3.at(array4[x]).replace([array2.flatten.min, array2.flatten.max])
        x += 1
      end
    else
      array3 << array[i]
    end
    i+=1
  end
 return  array3.uniq
end


p merge_ranges(array)


require "benchmark"

result = Benchmark.realtime do
  merge_ranges(array)
end
puts "処理概要 #{result}s"



### Offical solve
def merged_ranges(meetings)

  # sort by start time
  sorted_meetings = meetings.sort

  # initialize merged_meetings with the earliest meeting
  merged_meetings = [sorted_meetings[0]]

  sorted_meetings[1..-1].each do |current_meeting_start, current_meeting_end|

    last_merged_meeting_start, last_merged_meeting_end = merged_meetings[-1]

    # if the current meeting overlaps with the last merged meeting, use the
    # later end time of the two
    if current_meeting_start <= last_merged_meeting_end
      merged_meetings[-1] = [last_merged_meeting_start, [last_merged_meeting_end, current_meeting_end].max]

    # add the current meeting since it doesn't overlap
    else
      merged_meetings.push([current_meeting_start, current_meeting_end])
    end
  end

  return merged_meetings
end


result = Benchmark.realtime do
  merged_ranges(array)
end
puts "処理概要 #{result}s"
  # Your company built an in-house calendar tool called HiCal. You want to add a feature to see the times in a day when everyone is available.

# To do this, you’ll need to know when any team is having a meeting. In HiCal, a meeting is stored as an array ↴ of integers [start_time, end_time]. These integers represent the number of 30-minute blocks past 9:00am.

# For example:

#   [2, 3]  # meeting from 10:00 – 10:30 am
# [6, 9]  # meeting from 12:00 – 1:30 pm

# Write a method merge_ranges() that takes an array of multiple meeting time ranges and returns an array of condensed ranges.

# For example, given:

#   [[0, 1], [3, 5], [4, 8], [10, 12], [9, 10]]

# your method would return:

#   [[0, 1], [3, 8], [9, 12]]

# Do not assume the meetings are in order. The meeting times are coming from multiple teams.

# Write a solution that's efficient even when we can't put a nice upper bound on the numbers representing our time ranges. Here we've simplified our times down to the number of 30-minute slots past 9:00 am. But we want the method to work even for very large numbers, like Unix timestamps. In any case, the spirit of the challenge is to merge meetings where start_time and end_time don't have an upper bound.
